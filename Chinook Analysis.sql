/*Total Revenue*/
SELECT
 SUM(il.unit_price * il.quantity) AS total_sales
 FROM 
 invoice_line as il
 
/*Top Selling Artists*/
/* This analysis identify which artists have the highest sales based on invoice data */
SELECT 
    a.name,
    SUM(il.unit_price * il.quantity) AS total_sales
FROM 
    artist a
JOIN 
    album al ON a.artist_id = al.artist_id
JOIN 
    track t ON al.album_id = t.album_id
JOIN 
    invoice_line il ON t.track_id = il.track_id
GROUP BY 
    a.name
ORDER BY 
    total_sales DESC
LIMIT 10;


/*Most Popular Genres*/
/* This analysis determine which music genres are the most popular based on the number of tracks sold */
SELECT 
    g.name,
    COUNT(il.invoice_line_id) AS tracks_sold
FROM 
    genre g
JOIN 
    track t ON g.genre_id = t.genre_id
JOIN 
    invoice_line il ON t.track_id = il.track_id
GROUP BY 
    g.name
ORDER BY 
    tracks_sold DESC
LIMIT 10;


/*Customer Purchase Behavior*/
/* This analyze how much each customer spends on average*/

SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    COUNT(i.invoice_id) AS total_purchases,
    SUM(i.total) AS total_spent,
    AVG(i.total) AS average_spent
FROM 
    customer c
JOIN 
    invoice i ON c.customer_id = i.customer_id
GROUP BY 
    c.customer_id
ORDER BY 
    total_spent DESC;

/* Employee Sales Performance*/
/* This evaluate the performance of each employee based on the sales they have handled */

SELECT 
    e.employee_id,
    e.first_name || ' ' || e.last_name AS employee_name,
    SUM(i.total) AS total_sales
FROM 
    employee e
JOIN 
    customer c ON e.employee_id = c.support_rep_id
JOIN 
    invoice i ON c.customer_id = i.customer_id
GROUP BY 
    e.employee_id
ORDER BY 
    total_sales DESC;

/* Most Frequently Purchased Tracks*/
/* This analysis find out which tracks are purchased most frequently*/

SELECT 
    t.name,
    COUNT(il.invoice_line_id) AS purchase_count
FROM 
    track t
JOIN 
    invoice_line il ON t.track_id = il.track_id
GROUP BY 
    t.name
ORDER BY 
    purchase_count DESC
LIMIT 10;

/*Album Sales Distribution*/
/*This analyze how sales are distributed across differen albums*/
SELECT 
    al.album_id,
    al.title,
    SUM(il.unit_price * il.quantity) AS album_sales
FROM 
    album al
JOIN 
    track t ON al.album_id = t.album_id
JOIN 
    invoice_line il ON t.track_id = il.track_id
GROUP BY 
    al.album_id
ORDER BY 
    album_sales DESC;
	
/*Revenue by Media Type*/
/*Compare the reveune generated by different media types*/

SELECT 
    mt.name,
    SUM(il.unit_price * il.quantity) AS total_revenue
FROM 
    media_type mt
JOIN 
    track t ON mt.media_type_id = t.media_type_id
JOIN 
    invoice_line il ON t.track_id = il.track_id
GROUP BY 
    mt.name
ORDER BY 
    total_revenue DESC;

/*Playlist Popularity*/
/*Determine which playlists are the most popular based on the number of tracks they contain*/

SELECT 
    p.name as playlist_name,
    COUNT(pt.track_id) AS track_count
FROM 
    playlist p
JOIN 
    playlist_track pt ON p.playlist_id = pt.playlist_id
GROUP BY 
    p.name
ORDER BY 
    track_count DESC;

/* Churn Prediction Analysis */
/* This analysis predict which customers are likely to churn (i.e stop purchasing)*/

WITH customer_activity AS (
    SELECT 
        c.customer_id,
        MAX(i.invoice_date) AS last_purchase_date,
        COUNT(i.invoice_id) AS total_purchases,
        SUM(i.total) AS total_spent
    FROM 
        customer c
    JOIN 
        invoice i ON c.customer_id = i.customer_id
    GROUP BY 
        c.customer_id
)
SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    ca.last_purchase_date,
    ca.total_purchases,
    ca.total_spent,
    CASE 
        WHEN DATE ('now') - DATE(ca.last_purchase_date) > 365 THEN 'Likely to Churn'
        ELSE 'Active'
    END AS churn_risk
FROM 
    customer_activity ca
JOIN 
    customer c ON ca.customer_id = c.customer_id;


/* Employee Retention and Sales Correlation*/
/* This analysis investigate if there's a correlation between employee tenure and the sales they generate */

SELECT 
    e.employee_id,
    e.first_name || ' ' || e.last_name AS employee_name,
    (DATE ('now') - DATE (e.hire_date)) / 365 AS tenure_years,
    SUM(i.total) AS total_sales
FROM 
    employee e
JOIN 
    customer c ON e.employee_id = c.support_rep_id
JOIN 
    invoice i ON c.customer_id = i.customer_id
GROUP BY 
    e.employee_id
ORDER BY 
    tenure_years DESC, total_sales DESC;


/*Customer Lifetime Value Analysis*/
/* This analysis estimate the total revenue a customer is expected to generate over their lifetime with your store*/

WITH customer_revenue AS (
    SELECT 
        c.customer_id,
        SUM(i.total) AS total_spent,
        COUNT(DISTINCT i.invoice_id) AS total_purchases,
        MIN(i.invoice_date) AS first_purchase,
        MAX(i.invoice_date) AS last_purchase
    FROM 
        customer c
    JOIN 
        invoice i ON c.customer_id = i.customer_id
    GROUP BY 
        c.customer_id
)
SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    cr.total_spent,
    cr.total_purchases,
    (DATE (cr.last_purchase) - DATE (cr.first_purchase)) / cr.total_purchases AS avg_days_between_purchases,
    cr.total_spent / cr.total_purchases AS avg_order_value,
    cr.total_spent / ((DATE (cr.last_purchase) - DATE (cr.first_purchase)) / cr.total_purchases) AS customer_lifetime_value
FROM 
    customer c
JOIN 
    customer_revenue cr ON c.customer_id = cr.customer_id
ORDER BY 
    customer_lifetime_value DESC;


/* Sales Trends Over Time*/
/* This analysis identify the overall trend in sales over time, focusing on monthly or yearly growth*/
SELECT 
    TO_CHAR(i.invoice_date, 'YYYY-MM') AS month,
    SUM(i.total) AS total_sales
FROM 
    invoice i
GROUP BY 
    month
ORDER BY 
    month;


/*Genre Popularity Trends*/
/*This analysis track how the popularity of different genres has changed over time*/
SELECT 
    g.name,
    TO_CHAR(i.invoice_date, 'YYYY-MM') AS month,
    COUNT(il.invoice_line_id) AS tracks_sold
FROM 
    genre g
JOIN 
    track t ON g.genre_id = t.genre_id
JOIN 
    invoice_line il ON t.track_id = il.track_id
JOIN 
    invoice i ON il.invoice_id = i.invoice_id
GROUP BY 
    g.name, TO_CHAR(i.invoice_date, 'YYYY-MM')
ORDER BY 
    month, tracks_sold DESC;
	

/* Seasonality Analysis*/
/* This analysis identify any seasonal trends in sales or customer behavior by analyzing data over multiple years*/

SELECT 
    TO_CHAR(i.invoice_date, 'MM') AS month,
    SUM(i.total) AS total_sales
FROM 
    invoice i
GROUP BY 
    TO_CHAR(i.invoice_date, 'MM')
ORDER BY 
    month;


